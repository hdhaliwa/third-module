1. pros are less memory used, wider expandability range, cons are no indexing
2. mutual friends in facebook!
_______________________________________________

1. I believe the error is

..
ELSE

Set current to head

Set current.next to node
..

It should be
 
..
ELSE

Set current.next to head
Set head to node

..

class Node {
    constructor(value,next,prev){
        this.value = value;
        this.next = next;
        this.prev = prev;
    }
}

class LinkedList() {
    constructor(){
        this.head = null;
        this.tail = null;
        this.length = 0;
    }

    push(value) {
        let newNode = new Node(value);
        let current;

        if (!this.head) {
            this.head = newNode;
            this.tail = newNode;
            this.length = this.length + 1;
            return newNode;
        } 

        current = this.head;
        while(current.next) {
            current = current.next;
        }

        current.next = newNode;
        this.tail = newNode;
        this.length = this.length + 1;
        return newNode;
    }

    removeduplicate() {
        let current = this.head;
        let next;
        let nodes = {};

        while(current){
            let data = next.value;
            if(nodes[data]){
                current = current.next;
            } else {
                nodes[data] = current;
                current = next;
            }
        }
    }

    reverse() {
        if (!this.head.next) {
            return;
        }

        else if (this.length == 2) {
            let current = this.head;
            let temp = current.next;
            current = temp;
            current.next = this.head;
        }
        let prevItem = this.head;
        let currentItem = prevItem.next;
        let tailItem = this.head;

        while (current.next) {
            let nextItem = currentItem.next;
            currentItem.next = prevItem;
            tailItem.next = null;

            let temp = currentItem;
            currentItem = nextItem;
            prevItem = temp;
        }
        this.head = currentItem;
        currentItem.next = prevItem;
        this.tail = tailItem;
        return
    }
}

const listTest = new LinkedList();

listTest.addNode("a");
listTest.addNode("b");
listTest.addNode("c");
listTest.addNode("d");
listTest.addNode("f");

listTest.reverse();
console.log(listTest);