1. Stack uses LIFO, queue uses FIFO

2. They are both used to manage data, but in different orders.

3. I would use LIFO for both, since the last thing you did(or undid) would be the first thing you'd like to undo(or redo).

____
1. 

var word = 'Bloc!'

function reverse(original) {
    var newStack = []
    var temp = original.length-1;
    for(i=0; i < original.length; i++){
      newStack.push(original.charAt(temp-i))
    }
    var finalStack = newStack.join('');
    return finalStack;
}

console.log(word + ' reversed is ' + reverse(word));

2.

var word = 'Bloc!'

class Pop {
    constructor(){

    }

    function pop() {
        var array = this;
        var arrayTemp = array[array.length];
        var arrayLength = array.length-1;
        var newArray = [];

        for (i=0; i < arrayLength; i++){
            newArray.push(this[i]);
        }
        newArray.join('');
        return newArray

    }
}

3.

class Queue {
    constructor(){
        jobQueue = [];
    }

    enqueue(element) {
        jobQueue.push(element)
    }

    dequeue() {
        var temp = jobQueue[0];
        var tempIndex = jobQueue.indexOf(temp);
        jobQueue.splice(tempIndex,1);
        return temp;
    }

}


